/*
    BayesLevene is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BayesLevene is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BayesLevene.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_BayesLevene_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_BayesLevene");
    reader.add_event(174, 172, "end", "model_BayesLevene");
    return reader;
}

#include <meta_header.hpp>
 class model_BayesLevene : public prob_grad {
private:
    int k;
    double alpha;
    int nr_rel;
    int nr_free;
    int nr_equal;
    int nr_ordered;
    vector<int> index_vector;
    vector<int> relations;
    vector<vector<int> > constraint_mat;
    vector_d s2;
    vector_d N;
    int priors_only;
    vector_d n;
    vector_d b;
    double nplus;
public:
    model_BayesLevene(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_BayesLevene(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_BayesLevene_namespace::model_BayesLevene";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "k", "int", context__.to_vec());
            k = int(0);
            vals_i__ = context__.vals_i("k");
            pos__ = 0;
            k = vals_i__[pos__++];
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "alpha", "double", context__.to_vec());
            alpha = double(0);
            vals_r__ = context__.vals_r("alpha");
            pos__ = 0;
            alpha = vals_r__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "nr_rel", "int", context__.to_vec());
            nr_rel = int(0);
            vals_i__ = context__.vals_i("nr_rel");
            pos__ = 0;
            nr_rel = vals_i__[pos__++];
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "nr_free", "int", context__.to_vec());
            nr_free = int(0);
            vals_i__ = context__.vals_i("nr_free");
            pos__ = 0;
            nr_free = vals_i__[pos__++];
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "nr_equal", "int", context__.to_vec());
            nr_equal = int(0);
            vals_i__ = context__.vals_i("nr_equal");
            pos__ = 0;
            nr_equal = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "nr_ordered", "int", context__.to_vec());
            nr_ordered = int(0);
            vals_i__ = context__.vals_i("nr_ordered");
            pos__ = 0;
            nr_ordered = vals_i__[pos__++];
            current_statement_begin__ = 8;
            validate_non_negative_index("index_vector", "k", k);
            context__.validate_dims("data initialization", "index_vector", "int", context__.to_vec(k));
            validate_non_negative_index("index_vector", "k", k);
            index_vector = std::vector<int>(k,int(0));
            vals_i__ = context__.vals_i("index_vector");
            pos__ = 0;
            size_t index_vector_limit_0__ = k;
            for (size_t i_0__ = 0; i_0__ < index_vector_limit_0__; ++i_0__) {
                index_vector[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("relations", "nr_rel", nr_rel);
            context__.validate_dims("data initialization", "relations", "int", context__.to_vec(nr_rel));
            validate_non_negative_index("relations", "nr_rel", nr_rel);
            relations = std::vector<int>(nr_rel,int(0));
            vals_i__ = context__.vals_i("relations");
            pos__ = 0;
            size_t relations_limit_0__ = nr_rel;
            for (size_t i_0__ = 0; i_0__ < relations_limit_0__; ++i_0__) {
                relations[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("constraint_mat", "(nr_ordered + 1)", (nr_ordered + 1));
            validate_non_negative_index("constraint_mat", "2", 2);
            context__.validate_dims("data initialization", "constraint_mat", "int", context__.to_vec((nr_ordered + 1),2));
            validate_non_negative_index("constraint_mat", "(nr_ordered + 1)", (nr_ordered + 1));
            validate_non_negative_index("constraint_mat", "2", 2);
            constraint_mat = std::vector<std::vector<int> >((nr_ordered + 1),std::vector<int>(2,int(0)));
            vals_i__ = context__.vals_i("constraint_mat");
            pos__ = 0;
            size_t constraint_mat_limit_1__ = 2;
            for (size_t i_1__ = 0; i_1__ < constraint_mat_limit_1__; ++i_1__) {
                size_t constraint_mat_limit_0__ = (nr_ordered + 1);
                for (size_t i_0__ = 0; i_0__ < constraint_mat_limit_0__; ++i_0__) {
                    constraint_mat[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("s2", "k", k);
            context__.validate_dims("data initialization", "s2", "vector_d", context__.to_vec(k));
            validate_non_negative_index("s2", "k", k);
            s2 = vector_d(static_cast<Eigen::VectorXd::Index>(k));
            vals_r__ = context__.vals_r("s2");
            pos__ = 0;
            size_t s2_i_vec_lim__ = k;
            for (size_t i_vec__ = 0; i_vec__ < s2_i_vec_lim__; ++i_vec__) {
                s2[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("N", "k", k);
            context__.validate_dims("data initialization", "N", "vector_d", context__.to_vec(k));
            validate_non_negative_index("N", "k", k);
            N = vector_d(static_cast<Eigen::VectorXd::Index>(k));
            vals_r__ = context__.vals_r("N");
            pos__ = 0;
            size_t N_i_vec_lim__ = k;
            for (size_t i_vec__ = 0; i_vec__ < N_i_vec_lim__; ++i_vec__) {
                N[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "priors_only", "int", context__.to_vec());
            priors_only = int(0);
            vals_i__ = context__.vals_i("priors_only");
            pos__ = 0;
            priors_only = vals_i__[pos__++];

            // validate, data variables
            current_statement_begin__ = 2;
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            current_statement_begin__ = 9;
            current_statement_begin__ = 10;
            current_statement_begin__ = 11;
            check_greater_or_equal(function__,"s2",s2,0);
            current_statement_begin__ = 12;
            check_greater_or_equal(function__,"N",N,0);
            current_statement_begin__ = 13;
            // initialize data variables
            current_statement_begin__ = 17;
            validate_non_negative_index("n", "k", k);
            n = vector_d(static_cast<Eigen::VectorXd::Index>(k));
            stan::math::fill(n,DUMMY_VAR__);
            current_statement_begin__ = 18;
            validate_non_negative_index("b", "k", k);
            b = vector_d(static_cast<Eigen::VectorXd::Index>(k));
            stan::math::fill(b,DUMMY_VAR__);
            current_statement_begin__ = 19;
            nplus = double(0);
            stan::math::fill(nplus,DUMMY_VAR__);

            current_statement_begin__ = 21;
            stan::math::assign(n, divide(subtract(N,1.0),2.0));
            current_statement_begin__ = 22;
            stan::math::assign(b, elt_multiply(s2,N));
            current_statement_begin__ = 23;
            stan::math::assign(nplus, sum(n));

            // validate transformed data
            current_statement_begin__ = 17;
            check_greater_or_equal(function__,"n",n,0);
            current_statement_begin__ = 18;
            check_greater_or_equal(function__,"b",b,0);
            current_statement_begin__ = 19;

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 27;
            ++num_params_r__;
            current_statement_begin__ = 30;
            validate_non_negative_index("beta", "k", k);
            num_params_r__ += k;
            current_statement_begin__ = 31;
            validate_non_negative_index("lambda", "k", k);
            num_params_r__ += k;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_BayesLevene() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("tau")))
            throw std::runtime_error("variable tau missing");
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,tau);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable tau: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "k", k);
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(k));
        vector_d beta(static_cast<Eigen::VectorXd::Index>(k));
        for (int j1__ = 0U; j1__ < k; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("lambda")))
            throw std::runtime_error("variable lambda missing");
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        validate_non_negative_index("lambda", "k", k);
        context__.validate_dims("initialization", "lambda", "vector_d", context__.to_vec(k));
        vector_d lambda(static_cast<Eigen::VectorXd::Index>(k));
        for (int j1__ = 0U; j1__ < k; ++j1__)
            lambda(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lb_unconstrain(0,lambda);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lambda: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0,lp__);
            else
                tau = in__.scalar_lb_constrain(0);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_lub_constrain(0,1,k,lp__);
            else
                beta = in__.vector_lub_constrain(0,1,k);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.vector_lb_constrain(0,k,lp__);
            else
                lambda = in__.vector_lb_constrain(0,k);


            // transformed parameters
            current_statement_begin__ = 35;
            validate_non_negative_index("rho", "k", k);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rho(static_cast<Eigen::VectorXd::Index>(k));
            (void) rho;  // dummy to suppress unused var warning

            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho,DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("rlambda", "k", k);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rlambda(static_cast<Eigen::VectorXd::Index>(k));
            (void) rlambda;  // dummy to suppress unused var warning

            stan::math::initialize(rlambda, DUMMY_VAR__);
            stan::math::fill(rlambda,DUMMY_VAR__);


            current_statement_begin__ = 43;
            for (int i = 1; i <= k; ++i) {

                current_statement_begin__ = 44;
                stan::model::assign(rlambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(lambda,((k + 1) - i),"lambda",1), 
                            "assigning variable rlambda");
            }
            current_statement_begin__ = 47;
            for (int i = 1; i <= k; ++i) {

                current_statement_begin__ = 48;
                stan::model::assign(rho, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(rlambda,get_base1(index_vector,i,"index_vector",1),"rlambda",1), 
                            "assigning variable rho");
            }
            current_statement_begin__ = 51;
            stan::math::assign(rho, stan::model::deep_copy(divide(rho,sum(rho))));
            {
            current_statement_begin__ = 61;
            int is_ordered(0);
            (void) is_ordered;  // dummy to suppress unused var warning

            stan::math::fill(is_ordered, std::numeric_limits<int>::min());
            stan::math::assign(is_ordered,1);
            current_statement_begin__ = 62;
            int is_unconstrained(0);
            (void) is_unconstrained;  // dummy to suppress unused var warning

            stan::math::fill(is_unconstrained, std::numeric_limits<int>::min());
            stan::math::assign(is_unconstrained,1);


            current_statement_begin__ = 63;
            for (int i = 1; i <= nr_rel; ++i) {

                current_statement_begin__ = 64;
                if (as_bool(logical_neq(get_base1(relations,i,"relations",1),2))) {

                    current_statement_begin__ = 65;
                    stan::math::assign(is_ordered, 0);
                }
            }
            current_statement_begin__ = 69;
            for (int i = 1; i <= nr_rel; ++i) {

                current_statement_begin__ = 70;
                if (as_bool(logical_neq(get_base1(relations,i,"relations",1),3))) {

                    current_statement_begin__ = 71;
                    stan::math::assign(is_unconstrained, 0);
                }
            }
            current_statement_begin__ = 75;
            if (as_bool(logical_negation(logical_eq(is_unconstrained,1)))) {

                {
                current_statement_begin__ = 77;
                int i(0);
                (void) i;  // dummy to suppress unused var warning

                stan::math::fill(i, std::numeric_limits<int>::min());
                current_statement_begin__ = 78;
                int bi(0);
                (void) bi;  // dummy to suppress unused var warning

                stan::math::fill(bi, std::numeric_limits<int>::min());
                current_statement_begin__ = 79;
                int hi(0);
                (void) hi;  // dummy to suppress unused var warning

                stan::math::fill(hi, std::numeric_limits<int>::min());
                current_statement_begin__ = 80;
                int lo(0);
                (void) lo;  // dummy to suppress unused var warning

                stan::math::fill(lo, std::numeric_limits<int>::min());
                current_statement_begin__ = 81;
                int el(0);
                (void) el;  // dummy to suppress unused var warning

                stan::math::fill(el, std::numeric_limits<int>::min());
                current_statement_begin__ = 82;
                int cur(0);
                (void) cur;  // dummy to suppress unused var warning

                stan::math::fill(cur, std::numeric_limits<int>::min());
                current_statement_begin__ = 83;
                int rel(0);
                (void) rel;  // dummy to suppress unused var warning

                stan::math::fill(rel, std::numeric_limits<int>::min());
                current_statement_begin__ = 84;
                int prev(0);
                (void) prev;  // dummy to suppress unused var warning

                stan::math::fill(prev, std::numeric_limits<int>::min());
                current_statement_begin__ = 85;
                validate_non_negative_index("ubound", "k", k);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ubound(static_cast<Eigen::VectorXd::Index>(k));
                (void) ubound;  // dummy to suppress unused var warning

                stan::math::initialize(ubound, DUMMY_VAR__);
                stan::math::fill(ubound,DUMMY_VAR__);
                current_statement_begin__ = 86;
                validate_non_negative_index("lbound", "k", k);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lbound(static_cast<Eigen::VectorXd::Index>(k));
                (void) lbound;  // dummy to suppress unused var warning

                stan::math::initialize(lbound, DUMMY_VAR__);
                stan::math::fill(lbound,DUMMY_VAR__);
                current_statement_begin__ = 87;
                int nr_equals(0);
                (void) nr_equals;  // dummy to suppress unused var warning

                stan::math::fill(nr_equals, std::numeric_limits<int>::min());
                current_statement_begin__ = 88;
                int nr_equalities(0);
                (void) nr_equalities;  // dummy to suppress unused var warning

                stan::math::fill(nr_equalities, std::numeric_limits<int>::min());
                current_statement_begin__ = 89;
                int relation_between(0);
                (void) relation_between;  // dummy to suppress unused var warning

                stan::math::fill(relation_between, std::numeric_limits<int>::min());
                current_statement_begin__ = 90;
                int cur_constraint(0);
                (void) cur_constraint;  // dummy to suppress unused var warning

                stan::math::fill(cur_constraint, std::numeric_limits<int>::min());
                current_statement_begin__ = 91;
                int nr_unconstraint(0);
                (void) nr_unconstraint;  // dummy to suppress unused var warning

                stan::math::fill(nr_unconstraint, std::numeric_limits<int>::min());


                current_statement_begin__ = 92;
                stan::math::assign(bi, 1);
                current_statement_begin__ = 93;
                stan::math::assign(el, 1);
                current_statement_begin__ = 94;
                stan::math::assign(cur_constraint, 1);
                current_statement_begin__ = 97;
                while (as_bool(logical_lte(el,k))) {

                    current_statement_begin__ = 100;
                    stan::math::assign(hi, get_base1(get_base1(constraint_mat,cur_constraint,"constraint_mat",1),1,"constraint_mat",2));
                    current_statement_begin__ = 101;
                    stan::math::assign(lo, get_base1(get_base1(constraint_mat,cur_constraint,"constraint_mat",1),2,"constraint_mat",2));
                    current_statement_begin__ = 103;
                    if (as_bool(logical_eq(hi,-(1)))) {

                        current_statement_begin__ = 104;
                        stan::math::assign(ubound, rep_vector(1,k));
                    } else {

                        current_statement_begin__ = 106;
                        stan::math::assign(ubound, rep_vector(1,k));
                        current_statement_begin__ = 107;
                        stan::model::assign(ubound, 
                                    stan::model::cons_list(stan::model::index_min_max(1, hi), stan::model::nil_index_list()), 
                                    stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(1, hi), stan::model::nil_index_list()), "rho"), 
                                    "assigning variable ubound");
                    }
                    current_statement_begin__ = 110;
                    if (as_bool(logical_eq(lo,-(2)))) {

                        current_statement_begin__ = 111;
                        stan::math::assign(lbound, rep_vector(0,k));
                    } else {

                        current_statement_begin__ = 113;
                        stan::math::assign(lbound, rep_vector(0,k));
                        current_statement_begin__ = 114;
                        stan::model::assign(lbound, 
                                    stan::model::cons_list(stan::model::index_min_max(lo, k), stan::model::nil_index_list()), 
                                    stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(lo, k), stan::model::nil_index_list()), "rho"), 
                                    "assigning variable lbound");
                    }
                    current_statement_begin__ = 118;
                    if (as_bool((primitive_value(logical_eq(min(ubound),1.0)) && primitive_value(logical_eq(max(lbound),0.0))))) {

                        current_statement_begin__ = 121;
                        if (as_bool(logical_neq(get_base1(relations,el,"relations",1),3))) {

                            current_statement_begin__ = 122;
                            stan::model::assign(rho, 
                                        stan::model::cons_list(stan::model::index_uni(el), stan::model::nil_index_list()), 
                                        ((get_base1(beta,bi,"beta",1) * (min(ubound) - max(lbound))) + max(lbound)), 
                                        "assigning variable rho");
                        }
                    } else {

                        current_statement_begin__ = 126;
                        stan::model::assign(rho, 
                                    stan::model::cons_list(stan::model::index_uni(el), stan::model::nil_index_list()), 
                                    ((get_base1(beta,bi,"beta",1) * (min(ubound) - max(lbound))) + max(lbound)), 
                                    "assigning variable rho");
                    }
                    current_statement_begin__ = 132;
                    stan::math::assign(i, 0);
                    current_statement_begin__ = 133;
                    stan::math::assign(nr_equalities, 0);
                    current_statement_begin__ = 134;
                    while (as_bool((primitive_value(logical_lt((el + i),k)) && primitive_value(logical_eq(get_base1(relations,(el + i),"relations",1),1))))) {

                        current_statement_begin__ = 135;
                        stan::math::assign(nr_equalities, stan::model::deep_copy((nr_equalities + 1)));
                        current_statement_begin__ = 136;
                        stan::math::assign(i, stan::model::deep_copy((i + 1)));
                    }
                    current_statement_begin__ = 140;
                    for (int j = 1; j <= nr_equalities; ++j) {

                        current_statement_begin__ = 141;
                        stan::model::assign(rho, 
                                    stan::model::cons_list(stan::model::index_uni((el + j)), stan::model::nil_index_list()), 
                                    ((get_base1(beta,bi,"beta",1) * (min(ubound) - max(lbound))) + max(lbound)), 
                                    "assigning variable rho");
                    }
                    current_statement_begin__ = 144;
                    stan::math::assign(bi, stan::model::deep_copy((bi + 1)));
                    current_statement_begin__ = 145;
                    stan::math::assign(el, stan::model::deep_copy((el + nr_equalities)));
                    current_statement_begin__ = 148;
                    if (as_bool((primitive_value(logical_lte((el + 1),k)) && primitive_value(logical_eq(get_base1(relations,el,"relations",1),2))))) {

                        current_statement_begin__ = 149;
                        stan::math::assign(cur_constraint, stan::model::deep_copy((cur_constraint + 1)));
                    }
                    current_statement_begin__ = 152;
                    stan::math::assign(el, stan::model::deep_copy((el + 1)));
                }
                }
            }
            }
            current_statement_begin__ = 158;
            stan::math::assign(rho, stan::model::deep_copy(divide(rho,sum(rho))));

            // validate transformed parameters
            for (int i0__ = 0; i0__ < k; ++i0__) {
                if (stan::math::is_uninitialized(rho(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rho" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < k; ++i0__) {
                if (stan::math::is_uninitialized(rlambda(i0__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: rlambda" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 35;
            stan::math::check_simplex(function__,"rho",rho);
            current_statement_begin__ = 37;

            // model body

            current_statement_begin__ = 162;
            lp_accum__.add(-(stan::math::log(tau)));
            current_statement_begin__ = 163;
            lp_accum__.add(gamma_log(lambda,alpha,1));
            current_statement_begin__ = 165;
            if (as_bool(logical_negation(logical_eq(priors_only,1)))) {

                current_statement_begin__ = 166;
                lp_accum__.add((((((((k - sum(N)) / 2) * stan::math::log((2 * stan::math::pi()))) + dot_product(rep_vector(-(0.5),k),stan::math::log(N))) + (nplus * stan::math::log((tau * k)))) + dot_product(n,stan::math::log(rho))) - ((k * tau) * dot_product(divide(b,2),rho))));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("tau");
        names__.push_back("beta");
        names__.push_back("lambda");
        names__.push_back("rho");
        names__.push_back("rlambda");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(k);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_BayesLevene_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double tau = in__.scalar_lb_constrain(0);
        vector_d beta = in__.vector_lub_constrain(0,1,k);
        vector_d lambda = in__.vector_lb_constrain(0,k);
        vars__.push_back(tau);
            for (int k_0__ = 0; k_0__ < k; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < k; ++k_0__) {
            vars__.push_back(lambda[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 35;
            validate_non_negative_index("rho", "k", k);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rho(static_cast<Eigen::VectorXd::Index>(k));
            (void) rho;  // dummy to suppress unused var warning

            stan::math::initialize(rho, DUMMY_VAR__);
            stan::math::fill(rho,DUMMY_VAR__);
            current_statement_begin__ = 37;
            validate_non_negative_index("rlambda", "k", k);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  rlambda(static_cast<Eigen::VectorXd::Index>(k));
            (void) rlambda;  // dummy to suppress unused var warning

            stan::math::initialize(rlambda, DUMMY_VAR__);
            stan::math::fill(rlambda,DUMMY_VAR__);


            current_statement_begin__ = 43;
            for (int i = 1; i <= k; ++i) {

                current_statement_begin__ = 44;
                stan::model::assign(rlambda, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(lambda,((k + 1) - i),"lambda",1), 
                            "assigning variable rlambda");
            }
            current_statement_begin__ = 47;
            for (int i = 1; i <= k; ++i) {

                current_statement_begin__ = 48;
                stan::model::assign(rho, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            get_base1(rlambda,get_base1(index_vector,i,"index_vector",1),"rlambda",1), 
                            "assigning variable rho");
            }
            current_statement_begin__ = 51;
            stan::math::assign(rho, stan::model::deep_copy(divide(rho,sum(rho))));
            {
            current_statement_begin__ = 61;
            int is_ordered(0);
            (void) is_ordered;  // dummy to suppress unused var warning

            stan::math::fill(is_ordered, std::numeric_limits<int>::min());
            stan::math::assign(is_ordered,1);
            current_statement_begin__ = 62;
            int is_unconstrained(0);
            (void) is_unconstrained;  // dummy to suppress unused var warning

            stan::math::fill(is_unconstrained, std::numeric_limits<int>::min());
            stan::math::assign(is_unconstrained,1);


            current_statement_begin__ = 63;
            for (int i = 1; i <= nr_rel; ++i) {

                current_statement_begin__ = 64;
                if (as_bool(logical_neq(get_base1(relations,i,"relations",1),2))) {

                    current_statement_begin__ = 65;
                    stan::math::assign(is_ordered, 0);
                }
            }
            current_statement_begin__ = 69;
            for (int i = 1; i <= nr_rel; ++i) {

                current_statement_begin__ = 70;
                if (as_bool(logical_neq(get_base1(relations,i,"relations",1),3))) {

                    current_statement_begin__ = 71;
                    stan::math::assign(is_unconstrained, 0);
                }
            }
            current_statement_begin__ = 75;
            if (as_bool(logical_negation(logical_eq(is_unconstrained,1)))) {

                {
                current_statement_begin__ = 77;
                int i(0);
                (void) i;  // dummy to suppress unused var warning

                stan::math::fill(i, std::numeric_limits<int>::min());
                current_statement_begin__ = 78;
                int bi(0);
                (void) bi;  // dummy to suppress unused var warning

                stan::math::fill(bi, std::numeric_limits<int>::min());
                current_statement_begin__ = 79;
                int hi(0);
                (void) hi;  // dummy to suppress unused var warning

                stan::math::fill(hi, std::numeric_limits<int>::min());
                current_statement_begin__ = 80;
                int lo(0);
                (void) lo;  // dummy to suppress unused var warning

                stan::math::fill(lo, std::numeric_limits<int>::min());
                current_statement_begin__ = 81;
                int el(0);
                (void) el;  // dummy to suppress unused var warning

                stan::math::fill(el, std::numeric_limits<int>::min());
                current_statement_begin__ = 82;
                int cur(0);
                (void) cur;  // dummy to suppress unused var warning

                stan::math::fill(cur, std::numeric_limits<int>::min());
                current_statement_begin__ = 83;
                int rel(0);
                (void) rel;  // dummy to suppress unused var warning

                stan::math::fill(rel, std::numeric_limits<int>::min());
                current_statement_begin__ = 84;
                int prev(0);
                (void) prev;  // dummy to suppress unused var warning

                stan::math::fill(prev, std::numeric_limits<int>::min());
                current_statement_begin__ = 85;
                validate_non_negative_index("ubound", "k", k);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  ubound(static_cast<Eigen::VectorXd::Index>(k));
                (void) ubound;  // dummy to suppress unused var warning

                stan::math::initialize(ubound, DUMMY_VAR__);
                stan::math::fill(ubound,DUMMY_VAR__);
                current_statement_begin__ = 86;
                validate_non_negative_index("lbound", "k", k);
                Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  lbound(static_cast<Eigen::VectorXd::Index>(k));
                (void) lbound;  // dummy to suppress unused var warning

                stan::math::initialize(lbound, DUMMY_VAR__);
                stan::math::fill(lbound,DUMMY_VAR__);
                current_statement_begin__ = 87;
                int nr_equals(0);
                (void) nr_equals;  // dummy to suppress unused var warning

                stan::math::fill(nr_equals, std::numeric_limits<int>::min());
                current_statement_begin__ = 88;
                int nr_equalities(0);
                (void) nr_equalities;  // dummy to suppress unused var warning

                stan::math::fill(nr_equalities, std::numeric_limits<int>::min());
                current_statement_begin__ = 89;
                int relation_between(0);
                (void) relation_between;  // dummy to suppress unused var warning

                stan::math::fill(relation_between, std::numeric_limits<int>::min());
                current_statement_begin__ = 90;
                int cur_constraint(0);
                (void) cur_constraint;  // dummy to suppress unused var warning

                stan::math::fill(cur_constraint, std::numeric_limits<int>::min());
                current_statement_begin__ = 91;
                int nr_unconstraint(0);
                (void) nr_unconstraint;  // dummy to suppress unused var warning

                stan::math::fill(nr_unconstraint, std::numeric_limits<int>::min());


                current_statement_begin__ = 92;
                stan::math::assign(bi, 1);
                current_statement_begin__ = 93;
                stan::math::assign(el, 1);
                current_statement_begin__ = 94;
                stan::math::assign(cur_constraint, 1);
                current_statement_begin__ = 97;
                while (as_bool(logical_lte(el,k))) {

                    current_statement_begin__ = 100;
                    stan::math::assign(hi, get_base1(get_base1(constraint_mat,cur_constraint,"constraint_mat",1),1,"constraint_mat",2));
                    current_statement_begin__ = 101;
                    stan::math::assign(lo, get_base1(get_base1(constraint_mat,cur_constraint,"constraint_mat",1),2,"constraint_mat",2));
                    current_statement_begin__ = 103;
                    if (as_bool(logical_eq(hi,-(1)))) {

                        current_statement_begin__ = 104;
                        stan::math::assign(ubound, rep_vector(1,k));
                    } else {

                        current_statement_begin__ = 106;
                        stan::math::assign(ubound, rep_vector(1,k));
                        current_statement_begin__ = 107;
                        stan::model::assign(ubound, 
                                    stan::model::cons_list(stan::model::index_min_max(1, hi), stan::model::nil_index_list()), 
                                    stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(1, hi), stan::model::nil_index_list()), "rho"), 
                                    "assigning variable ubound");
                    }
                    current_statement_begin__ = 110;
                    if (as_bool(logical_eq(lo,-(2)))) {

                        current_statement_begin__ = 111;
                        stan::math::assign(lbound, rep_vector(0,k));
                    } else {

                        current_statement_begin__ = 113;
                        stan::math::assign(lbound, rep_vector(0,k));
                        current_statement_begin__ = 114;
                        stan::model::assign(lbound, 
                                    stan::model::cons_list(stan::model::index_min_max(lo, k), stan::model::nil_index_list()), 
                                    stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(lo, k), stan::model::nil_index_list()), "rho"), 
                                    "assigning variable lbound");
                    }
                    current_statement_begin__ = 118;
                    if (as_bool((primitive_value(logical_eq(min(ubound),1.0)) && primitive_value(logical_eq(max(lbound),0.0))))) {

                        current_statement_begin__ = 121;
                        if (as_bool(logical_neq(get_base1(relations,el,"relations",1),3))) {

                            current_statement_begin__ = 122;
                            stan::model::assign(rho, 
                                        stan::model::cons_list(stan::model::index_uni(el), stan::model::nil_index_list()), 
                                        ((get_base1(beta,bi,"beta",1) * (min(ubound) - max(lbound))) + max(lbound)), 
                                        "assigning variable rho");
                        }
                    } else {

                        current_statement_begin__ = 126;
                        stan::model::assign(rho, 
                                    stan::model::cons_list(stan::model::index_uni(el), stan::model::nil_index_list()), 
                                    ((get_base1(beta,bi,"beta",1) * (min(ubound) - max(lbound))) + max(lbound)), 
                                    "assigning variable rho");
                    }
                    current_statement_begin__ = 132;
                    stan::math::assign(i, 0);
                    current_statement_begin__ = 133;
                    stan::math::assign(nr_equalities, 0);
                    current_statement_begin__ = 134;
                    while (as_bool((primitive_value(logical_lt((el + i),k)) && primitive_value(logical_eq(get_base1(relations,(el + i),"relations",1),1))))) {

                        current_statement_begin__ = 135;
                        stan::math::assign(nr_equalities, stan::model::deep_copy((nr_equalities + 1)));
                        current_statement_begin__ = 136;
                        stan::math::assign(i, stan::model::deep_copy((i + 1)));
                    }
                    current_statement_begin__ = 140;
                    for (int j = 1; j <= nr_equalities; ++j) {

                        current_statement_begin__ = 141;
                        stan::model::assign(rho, 
                                    stan::model::cons_list(stan::model::index_uni((el + j)), stan::model::nil_index_list()), 
                                    ((get_base1(beta,bi,"beta",1) * (min(ubound) - max(lbound))) + max(lbound)), 
                                    "assigning variable rho");
                    }
                    current_statement_begin__ = 144;
                    stan::math::assign(bi, stan::model::deep_copy((bi + 1)));
                    current_statement_begin__ = 145;
                    stan::math::assign(el, stan::model::deep_copy((el + nr_equalities)));
                    current_statement_begin__ = 148;
                    if (as_bool((primitive_value(logical_lte((el + 1),k)) && primitive_value(logical_eq(get_base1(relations,el,"relations",1),2))))) {

                        current_statement_begin__ = 149;
                        stan::math::assign(cur_constraint, stan::model::deep_copy((cur_constraint + 1)));
                    }
                    current_statement_begin__ = 152;
                    stan::math::assign(el, stan::model::deep_copy((el + 1)));
                }
                }
            }
            }
            current_statement_begin__ = 158;
            stan::math::assign(rho, stan::model::deep_copy(divide(rho,sum(rho))));

            // validate transformed parameters
            current_statement_begin__ = 35;
            stan::math::check_simplex(function__,"rho",rho);
            current_statement_begin__ = 37;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_0__ = 0; k_0__ < k; ++k_0__) {
            vars__.push_back(rho[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < k; ++k_0__) {
            vars__.push_back(rlambda[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_BayesLevene";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rlambda" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "lambda" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_0__ = 1; k_0__ <= (k - 1); ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rho" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
            for (int k_0__ = 1; k_0__ <= k; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "rlambda" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef model_BayesLevene_namespace::model_BayesLevene stan_model;


#endif
